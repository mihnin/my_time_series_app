# data_analysis.py
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import logging
import os
from typing import Dict, List, Any, Optional, Tuple
import time
import io

from src.validation.data_validation import (
    validate_dataset, display_validation_results,
    plot_target_distribution, plot_target_boxplot, plot_target_time_series,
    analyze_seasonal_patterns, detect_autocorrelation
)
from src.features.correlation_analysis import (
    analyze_correlations, display_correlation_results
)
from src.features.seasonal_decomposition import (
    decompose_time_series, display_decomposition_results
)
from src.features.drift_detection import (
    detect_concept_drift, display_drift_results
)
from src.data.data_processing import (
    load_data, show_dataset_stats, split_train_test, detect_outliers
)
from src.features.feature_engineering import (
    add_time_features, apply_target_transformations,
    generate_lag_features, generate_rolling_features
)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def download_excel(df, filename="data_export.xlsx"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False)
    
    processed_data = output.getvalue()
    
    st.download_button(
        label="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel",
        data=processed_data,
        file_name=filename,
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def show_data_usage_info(feature_type):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    st.info(f"""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {feature_type}?
    
    - **–î–ª—è –∞–Ω–∞–ª–∏–∑–∞**: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∞–Ω–∞–ª–∏–∑–∞. 
      –° –Ω–∏–º–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–π –∞–Ω–∞–ª–∏–∑, —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏.
    
    - **–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**: –° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel" –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö 
      –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
      
    - **–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.
    """)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—è–¥–µ
def fill_time_series_gaps(df, dt_col, tgt_col, id_col=None, method='ffill'):
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
        dt_col (str): –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        tgt_col (str): –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        id_col (str, optional): –ò–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        method (str): –ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: 'ffill', 'bfill', 'linear', 'cubic', 'mean', 'median'
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
    """
    result_df = df.copy()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç ID –∫–æ–ª–æ–Ω–∫–∏, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ —Ä—è–¥–∞
    if id_col is None or id_col == "<–Ω–µ—Ç>":
        if method in ['ffill', 'bfill']:
            result_df[tgt_col] = result_df[tgt_col].fillna(method=method)
        elif method in ['linear', 'cubic']:
            result_df[tgt_col] = result_df.sort_values(dt_col)[tgt_col].interpolate(method=method)
        elif method == 'mean':
            result_df[tgt_col] = result_df[tgt_col].fillna(result_df[tgt_col].mean())
        elif method == 'median':
            result_df[tgt_col] = result_df[tgt_col].fillna(result_df[tgt_col].median())
    else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å ID –∫–æ–ª–æ–Ω–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
        for id_val, group in result_df.groupby(id_col):
            if method in ['ffill', 'bfill']:
                result_df.loc[group.index, tgt_col] = group[tgt_col].fillna(method=method)
            elif method in ['linear', 'cubic']:
                sorted_group = group.sort_values(dt_col)
                result_df.loc[sorted_group.index, tgt_col] = sorted_group[tgt_col].interpolate(method=method)
            elif method == 'mean':
                mean_val = group[tgt_col].mean()
                result_df.loc[group.index, tgt_col] = group[tgt_col].fillna(mean_val)
            elif method == 'median':
                median_val = group[tgt_col].median()
                result_df.loc[group.index, tgt_col] = group[tgt_col].fillna(median_val)
    
    return result_df

def run_data_analysis():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    """
    st.title("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session_state –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if "df_analysis" not in st.session_state:
        st.session_state["df_analysis"] = None
    
    if "analysis_dt_col" not in st.session_state:
        st.session_state["analysis_dt_col"] = "<–Ω–µ—Ç>"
    
    if "analysis_tgt_col" not in st.session_state:
        st.session_state["analysis_tgt_col"] = "<–Ω–µ—Ç>"
    
    if "analysis_id_col" not in st.session_state:
        st.session_state["analysis_id_col"] = "<–Ω–µ—Ç>"
    
    if "analysis_static_feats" not in st.session_state:
        st.session_state["analysis_static_feats"] = []
    
    # –û–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    upload_options = [
        "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", 
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
    ]
    upload_choice = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:", upload_options)
    
    if upload_choice == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ":
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"):
            chunk_size = st.number_input(
                "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (—Å—Ç—Ä–æ–∫)",
                min_value=1000,
                max_value=1000000,
                value=100000,
                step=10000,
                help="–î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>100 –ú–ë) –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–∞—Å—Ç—è–º–∏. –ó–∞–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏."
            )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
            type=["csv", "xls", "xlsx"],
            key="analysis_file_uploader"
        )
        
        if uploaded_file is not None:
            try:
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                    df = load_data(uploaded_file, chunk_size=chunk_size)
                    st.session_state["df_analysis"] = df
                    st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –°—Ç—Ä–æ–∫: {len(df)}, –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if len(df) > 1000:
                        st.dataframe(df.head(1000))
                        st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∏–∑ {len(df)} —Å—Ç—Ä–æ–∫.")
                    else:
                        st.dataframe(df)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    with st.expander("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                        show_dataset_stats(df)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if "df" in st.session_state and st.session_state["df"] is not None:
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
                st.session_state["df_analysis"] = st.session_state["df"].copy()
                
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if "dt_col_key" in st.session_state and st.session_state["dt_col_key"] != "<–Ω–µ—Ç>":
                    st.session_state["analysis_dt_col"] = st.session_state["dt_col_key"]
                
                if "tgt_col_key" in st.session_state and st.session_state["tgt_col_key"] != "<–Ω–µ—Ç>":
                    st.session_state["analysis_tgt_col"] = st.session_state["tgt_col_key"]
                
                if "id_col_key" in st.session_state and st.session_state["id_col_key"] != "<–Ω–µ—Ç>":
                    st.session_state["analysis_id_col"] = st.session_state["id_col_key"]
                
                if "static_feats_key" in st.session_state:
                    st.session_state["analysis_static_feats"] = st.session_state["static_feats_key"]
                
                st.success("–î–∞–Ω–Ω—ã–µ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                if len(st.session_state["df_analysis"]) > 1000:
                    st.dataframe(st.session_state["df_analysis"].head(1000))
                    st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∏–∑ {len(st.session_state['df_analysis'])} —Å—Ç—Ä–æ–∫.")
                else:
                    st.dataframe(st.session_state["df_analysis"])
        else:
            st.warning("–ù–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'.")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df_analysis = st.session_state.get("df_analysis")
    
    if df_analysis is None:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    
    # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    st.header("2. –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    all_cols = list(df_analysis.columns)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
    dt_stored = st.session_state["analysis_dt_col"]
    tgt_stored = st.session_state["analysis_tgt_col"]
    id_stored = st.session_state["analysis_id_col"]
    
    if dt_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["analysis_dt_col"] = "<–Ω–µ—Ç>"
    if tgt_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["analysis_tgt_col"] = "<–Ω–µ—Ç>"
    if id_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["analysis_id_col"] = "<–Ω–µ—Ç>"
    
    # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –≤ —á–∏—Å–ª–æ, –∞ –Ω–µ —Å–ø–∏—Å–æ–∫ —Å —á–∏—Å–ª–æ–º
        if dt_stored in all_cols:
            dt_index = all_cols.index(dt_stored) + 1  # +1 –∏–∑-–∑–∞ –æ–ø—Ü–∏–∏ "<–Ω–µ—Ç>" –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
        else:
            dt_index = 0  # –ò–Ω–¥–µ–∫—Å –æ–ø—Ü–∏–∏ "<–Ω–µ—Ç>"
            
        dt_col = st.selectbox(
            "–ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π", 
            ["<–Ω–µ—Ç>"] + all_cols, 
            index=dt_index,
            key="analysis_dt_col_select"
        )
        st.session_state["analysis_dt_col"] = dt_col
    
    with col2:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
        if tgt_stored in all_cols:
            tgt_index = all_cols.index(tgt_stored) + 1
        else:
            tgt_index = 0
            
        tgt_col = st.selectbox(
            "–ö–æ–ª–æ–Ω–∫–∞ target", 
            ["<–Ω–µ—Ç>"] + all_cols,
            index=tgt_index,
            key="analysis_tgt_col_select"
        )
        st.session_state["analysis_tgt_col"] = tgt_col
    
    with col3:
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è ID –∫–æ–ª–æ–Ω–∫–∏
        if id_stored in all_cols:
            id_index = all_cols.index(id_stored) + 1
        else:
            id_index = 0
            
        id_col = st.selectbox(
            "–ö–æ–ª–æ–Ω–∫–∞ ID", 
            ["<–Ω–µ—Ç>"] + all_cols,
            index=id_index,
            key="analysis_id_col_select"
        )
        st.session_state["analysis_id_col"] = id_col
    
    # –í—ã–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å ID)
    if id_col != "<–Ω–µ—Ç>":
        possible_static = [c for c in all_cols if c not in [dt_col, tgt_col, id_col, "<–Ω–µ—Ç>"]]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ç–µ–∫—É—â–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–µ
        stored_static_feats = st.session_state["analysis_static_feats"]
        filtered_feats = [feat for feat in stored_static_feats if feat in possible_static]
        
        if len(filtered_feats) != len(stored_static_feats):
            st.session_state["analysis_static_feats"] = filtered_feats
        
        st.multiselect(
            "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–¥–æ 3):", 
            possible_static,
            default=filtered_feats,
            max_selections=3,
            key="analysis_static_feats_select"
        )
        st.session_state["analysis_static_feats"] = st.session_state["analysis_static_feats_select"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if dt_col == "<–Ω–µ—Ç>" or tgt_col == "<–Ω–µ—Ç>":
        st.warning("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π!")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã
    if not pd.api.types.is_datetime64_any_dtype(df_analysis[dt_col]):
        with st.spinner("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç—ã..."):
            df_analysis[dt_col] = pd.to_datetime(df_analysis[dt_col], errors="coerce")
            st.info(f"–ö–æ–ª–æ–Ω–∫–∞ {dt_col} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    tabs = st.tabs([
        "–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", 
        "–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π", 
        "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏",
        "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å",
        "–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞",
        "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"
    ])
    
    # 1. –í–∫–ª–∞–¥–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    with tabs[0]:
        st.header("–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö", key="run_validation_btn"):
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö..."):
                try:
                    validation_results = validate_dataset(df_analysis, dt_col, tgt_col, id_col)
                    display_validation_results(validation_results)
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –ø–æ ID, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    if id_col != "<–Ω–µ—Ç>" and id_col in df_analysis.columns:
                        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ ID")
                        id_counts = df_analysis[id_col].value_counts().reset_index()
                        id_counts.columns = [id_col, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≥—Ä–∞—Ñ–∏–∫
                        col1, col2 = st.columns([1, 2])
                        
                        with col1:
                            st.dataframe(id_counts)
                        
                        with col2:
                            fig = px.bar(id_counts, x=id_col, y="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
                                        title=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ {id_col}")
                            st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # 2. –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    with tabs[1]:
        st.header("–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        target_tabs = st.tabs(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥", "–ê–Ω–æ–º–∞–ª–∏–∏/–≤—ã–±—Ä–æ—Å—ã", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏"])
        
        # 2.1 –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        with target_tabs[0]:
            st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
            
            # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            fig_dist = plot_target_distribution(df_analysis, tgt_col)
            if fig_dist:
                st.plotly_chart(fig_dist, use_container_width=True)
            else:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ {tgt_col}")
            
            # –ë–æ–∫—Å–ø–ª–æ—Ç
            fig_box = plot_target_boxplot(df_analysis, tgt_col, id_col)
            if fig_box:
                st.plotly_chart(fig_box, use_container_width=True)
            else:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –±–æ–∫—Å–ø–ª–æ—Ç –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ {tgt_col}")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
                stats = df_analysis[tgt_col].describe()
                st.dataframe(stats)
        
        # 2.2 –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        with target_tabs[1]:
            st.subheader("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
            
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
            fig_ts = plot_target_time_series(df_analysis, dt_col, tgt_col, id_col)
            if fig_ts:
                st.plotly_chart(fig_ts, use_container_width=True)
            else:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ {dt_col} –∏ {tgt_col}")
            
            # –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            st.subheader("–°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", key="analyze_seasonal_btn"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤..."):
                    try:
                        seasonal_results = analyze_seasonal_patterns(df_analysis, dt_col, tgt_col, id_col)
                        
                        if "error" in seasonal_results:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {seasonal_results['error']}")
                        else:
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º
                            if 'figures' in seasonal_results and 'monthly' in seasonal_results['figures']:
                                st.write("#### –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–µ—Å—è—Ü–∞–º")
                                st.plotly_chart(seasonal_results['figures']['monthly'], use_container_width=True)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
                            if 'figures' in seasonal_results and 'weekday' in seasonal_results['figures']:
                                st.write("#### –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
                                st.plotly_chart(seasonal_results['figures']['weekday'], use_container_width=True)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º
                            if 'figures' in seasonal_results and 'quarterly' in seasonal_results['figures']:
                                st.write("#### –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º")
                                st.plotly_chart(seasonal_results['figures']['quarterly'], use_container_width=True)
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {e}")
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏: {e}")
            
            # –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            st.subheader("–ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
            if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é", key="analyze_autocorr_btn"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏..."):
                    try:
                        max_lag = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∞–≥", 5, 100, 30)
                        autocorr_results = detect_autocorrelation(df_analysis, dt_col, tgt_col, id_col, max_lag=max_lag)
                        
                        if 'error' in autocorr_results:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {autocorr_results['error']}")
                        else:
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ACF
                            if 'figures' in autocorr_results and 'acf' in autocorr_results['figures']:
                                st.write("#### –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (ACF)")
                                st.plotly_chart(autocorr_results['figures']['acf'], use_container_width=True)
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ PACF
                            if 'figures' in autocorr_results and 'pacf' in autocorr_results['figures']:
                                st.write("#### –ß–∞—Å—Ç–∏—á–Ω–∞—è –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (PACF)")
                                st.plotly_chart(autocorr_results['figures']['pacf'], use_container_width=True)
                            
                            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                            if 'analyzed_id' in autocorr_results:
                                st.info(f"–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω –¥–ª—è ID={autocorr_results['analyzed_id']} (—Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥).")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
        
        # 2.3 –ê–Ω–æ–º–∞–ª–∏–∏/–≤—ã–±—Ä–æ—Å—ã
        with target_tabs[2]:
            st.subheader("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
            
            col1, col2 = st.columns([1, 2])
            
            with col1:
                outlier_method = st.selectbox(
                    "–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤",
                    ["IQR (–º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö)", "Z-score (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)"],
                    key="outlier_method"
                )
                
                method_map = {
                    "IQR (–º–µ–∂–∫–≤–∞—Ä—Ç–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–∞—Ö)": "iqr",
                    "Z-score (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)": "zscore"
                }
                
                if st.button("–ù–∞–π—Ç–∏ –≤—ã–±—Ä–æ—Å—ã", key="find_outliers_btn"):
                    if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                        with st.spinner("–ü–æ–∏—Å–∫ –≤—ã–±—Ä–æ—Å–æ–≤..."):
                            try:
                                clean_df, outliers_df = detect_outliers(
                                    df_analysis, tgt_col, id_col if id_col != "<–Ω–µ—Ç>" else None, 
                                    method=method_map[outlier_method]
                                )
                                
                                st.session_state["clean_df"] = clean_df
                                st.session_state["outliers_df"] = outliers_df
                                
                                st.success(f"–ù–∞–π–¥–µ–Ω–æ {len(outliers_df)} –≤—ã–±—Ä–æ—Å–æ–≤ ({len(outliers_df)/len(df_analysis)*100:.2f}% –æ—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö).")
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤: {e}")
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—ã–±—Ä–æ—Å–æ–≤: {e}")
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {tgt_col} –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
            
            with col2:
                # –ï—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤—ã–±—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                if "outliers_df" in st.session_state and "clean_df" in st.session_state:
                    outliers_df = st.session_state["outliers_df"]
                    clean_df = st.session_state["clean_df"]
                    
                    if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns and not outliers_df.empty:
                        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                        plot_df = pd.DataFrame()
                        clean_df_plot = clean_df.copy()
                        clean_df_plot['type'] = 'Normal'
                        
                        outliers_df_plot = outliers_df.copy()
                        outliers_df_plot['type'] = 'Outlier'
                        
                        plot_df = pd.concat([clean_df_plot, outliers_df_plot])
                        
                        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
                        fig = px.scatter(
                            plot_df, x=dt_col, y=tgt_col, color='type',
                            title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤",
                            color_discrete_map={'Normal': 'blue', 'Outlier': 'red'}
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
                        if id_col != "<–Ω–µ—Ç>" and id_col in outliers_df.columns:
                            outlier_counts = outliers_df[id_col].value_counts().reset_index()
                            outlier_counts.columns = [id_col, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–æ—Å–æ–≤"]
                            
                            st.write("#### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –ø–æ ID")
                            st.dataframe(outlier_counts)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            if "clean_df" in st.session_state and "outliers_df" in st.session_state:
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤", key="use_clean_data_btn"):
                        st.session_state["df_analysis"] = st.session_state["clean_df"]
                        st.success("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!")
                
                with col2:
                    if st.button("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", key="restore_original_data_btn"):
                        st.session_state["df_analysis"] = df_analysis
                        st.success("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
                st.subheader("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    fill_method = st.selectbox(
                        "–ú–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤",
                        ["–ë–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", "–ü—Ä—è–º–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (ffill)", "–û–±—Ä–∞—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (bfill)",
                         "–õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è", "–ö—É–±–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è", "–°—Ä–µ–¥–Ω–µ–µ", "–ú–µ–¥–∏–∞–Ω–∞"],
                        key="fill_gaps_method"
                    )
                
                method_map = {
                    "–ü—Ä—è–º–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (ffill)": "ffill",
                    "–û–±—Ä–∞—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (bfill)": "bfill",
                    "–õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è": "linear",
                    "–ö—É–±–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è": "cubic",
                    "–°—Ä–µ–¥–Ω–µ–µ": "mean",
                    "–ú–µ–¥–∏–∞–Ω–∞": "median"
                }
                
                with col2:
                    if st.button("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏", key="fill_gaps_btn"):
                        if fill_method != "–ë–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è":
                            with st.spinner("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤..."):
                                try:
                                    # –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    clean_data = st.session_state["clean_df"]
                                    
                                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
                                    filled_data = fill_time_series_gaps(
                                        clean_data, dt_col, tgt_col, 
                                        id_col=id_col if id_col != "<–Ω–µ—Ç>" else None,
                                        method=method_map[fill_method]
                                    )
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–ø–æ–ª–Ω–∏–ª–∏
                                    na_before = clean_data[tgt_col].isna().sum()
                                    na_after = filled_data[tgt_col].isna().sum()
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                    st.session_state["filled_df"] = filled_data
                                    
                                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                    st.success(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {na_before - na_after} –∏–∑ {na_before}")
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                    if dt_col and tgt_col and dt_col in clean_data.columns and tgt_col in clean_data.columns:
                                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                                        fig = make_subplots(rows=1, cols=2, 
                                                   subplot_titles=("–î–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", "–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"))
                                        
                                        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö —Ç–æ—á–µ–∫
                                        max_points = 1000
                                        if len(clean_data) > max_points:
                                            sample_clean = clean_data.sample(max_points)
                                            sample_filled = filled_data.loc[sample_clean.index]
                                        else:
                                            sample_clean = clean_data
                                            sample_filled = filled_data
                                        
                                        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                        fig.add_trace(
                                            go.Scatter(
                                                x=sample_clean[dt_col], 
                                                y=sample_clean[tgt_col],
                                                mode='markers',
                                                name='–î–æ'
                                            ),
                                            row=1, col=1
                                        )
                                        
                                        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                                        fig.add_trace(
                                            go.Scatter(
                                                x=sample_filled[dt_col], 
                                                y=sample_filled[tgt_col],
                                                mode='markers',
                                                name='–ü–æ—Å–ª–µ'
                                            ),
                                            row=1, col=2
                                        )
                                        
                                        fig.update_layout(
                                            title_text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ –∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", 
                                            height=500
                                        )
                                        
                                        st.plotly_chart(fig, use_container_width=True)
                                    
                                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", key="use_filled_data_btn"):
                                        st.session_state["df_analysis"] = filled_data
                                        st.success("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏!")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {e}")
                        else:
                            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤.")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
                st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                exp_col1, exp_col2 = st.columns(2)
                
                with exp_col1:
                    st.write("#### –î–∞–Ω–Ω—ã–µ –±–µ–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
                    download_excel(st.session_state["clean_df"], "clean_data.xlsx")
                
                with exp_col2:
                    st.write("#### –í—ã–±—Ä–æ—Å—ã")
                    download_excel(st.session_state["outliers_df"], "outliers_data.xlsx")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≥—Ä—É–∑–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if "filled_df" in st.session_state:
                    st.write("#### –î–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø—É—Å–∫–∞–º–∏")
                    download_excel(st.session_state["filled_df"], "filled_data.xlsx")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                show_data_usage_info("–æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ –ø—Ä–æ–ø—É—Å–∫–∏
                st.info("""
                **–û –ø—Ä–æ–ø—É—Å–∫–∞—Ö –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–∞—Ö:**
                
                –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:
                
                - **–ü—Ä—è–º–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (ffill)** - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                - **–û–±—Ä–∞—Ç–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (bfill)** - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                - **–õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è** - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ –ø—Ä—è–º–æ–π –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
                - **–ö—É–±–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è** - —Å–æ–∑–¥–∞—ë—Ç –≥–ª–∞–¥–∫—É—é –∫—Ä–∏–≤—É—é —á–µ—Ä–µ–∑ –≤—Å–µ —Ç–æ—á–∫–∏
                - **–°—Ä–µ–¥–Ω–µ–µ/–ú–µ–¥–∏–∞–Ω–∞** - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ —Å—Ä–µ–¥–Ω–∏–º –∏–ª–∏ –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–±–∏—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–ª–∏–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.
                """)
        
        # 2.4 –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
        with target_tabs[3]:
            st.subheader("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
            
            # –í—ã–±–æ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            transformation = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                ["–ù–µ—Ç", "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è (log)", "–ö–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π (sqrt)", "Box-Cox", "Yeo-Johnson"],
                key="transformation_type"
            )
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
            if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é", key="apply_transform_btn"):
                if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                    with st.spinner("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏..."):
                        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
                        transform_map = {
                            "–ù–µ—Ç": None,
                            "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è (log)": "log",
                            "–ö–æ—Ä–µ–Ω—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π (sqrt)": "sqrt",
                            "Box-Cox": "box-cox",
                            "Yeo-Johnson": "yeo-johnson"
                        }
                        
                        if transformation != "–ù–µ—Ç":
                            try:
                                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                                transformed_df = apply_target_transformations(
                                    df_analysis, tgt_col, transformation=transform_map[transformation]
                                )
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                st.session_state["transformed_df"] = transformed_df
                                st.session_state["applied_transformation"] = transform_map[transformation]
                                
                                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ "–¥–æ" –∏ "–ø–æ—Å–ª–µ"
                                fig = make_subplots(
                                    rows=1, cols=2,
                                    subplot_titles=("–î–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                                )
                                
                                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                fig.add_trace(
                                    go.Histogram(x=df_analysis[tgt_col], name="–î–æ"),
                                    row=1, col=1
                                )
                                
                                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
                                fig.add_trace(
                                    go.Histogram(x=transformed_df[tgt_col], name="–ü–æ—Å–ª–µ"),
                                    row=1, col=2
                                )
                                
                                fig.update_layout(
                                    title_text=f"–≠—Ñ—Ñ–µ–∫—Ç {transformation} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                                    showlegend=False
                                )
                                
                                st.plotly_chart(fig, use_container_width=True)
                                
                                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
                                st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫")
                                
                                stats_before = df_analysis[tgt_col].describe()
                                stats_after = transformed_df[tgt_col].describe()
                                
                                stats_comparison = pd.DataFrame({
                                    "–î–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏": stats_before,
                                    "–ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏": stats_after
                                })
                                
                                st.dataframe(stats_comparison)
                                
                                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", key="use_transformed_data_btn"):
                                    st.session_state["df_analysis"] = transformed_df
                                    st.success(f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å {transformation} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!")
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
                        else:
                            st.info("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
                else:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {tgt_col} –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            
            # –ü–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
            if "transformed_df" in st.session_state:
                st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                
                # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
                download_excel(st.session_state["transformed_df"], "transformed_data.xlsx")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                show_data_usage_info("—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # 3. –í–∫–ª–∞–¥–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    with tabs[2]:
        st.header("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        static_feats = st.session_state.get("analysis_static_feats", [])
        
        if not static_feats:
            st.warning("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏—Ö –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'.")
        else:
            if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", key="analyze_correlations_btn"):
                with st.spinner("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π..."):
                    try:
                        correlation_results = analyze_correlations(df_analysis, static_feats, tgt_col)
                        display_correlation_results(correlation_results)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                        st.session_state["correlation_results"] = correlation_results
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: {e}")
    
    # 4. –í–∫–ª–∞–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
    with tabs[3]:
        st.header("–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏
        ts_tabs = st.tabs(["–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"])
        
        # 4.1 –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞
        with ts_tabs[0]:
            st.subheader("–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞")
            
            period = st.number_input(
                "–ü–µ—Ä–∏–æ–¥ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ 0 –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)",
                min_value=0,
                max_value=365,
                value=0,
                key="decomposition_period"
            )
            
            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é", key="decompose_btn"):
                if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns and tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞..."):
                        try:
                            decomposition_results = decompose_time_series(
                                df_analysis, dt_col, tgt_col, 
                                id_col if id_col != "<–Ω–µ—Ç>" else None,
                                period=None if period == 0 else period
                            )
                            display_decomposition_results(decomposition_results)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state
                            st.session_state["decomposition_results"] = decomposition_results
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞: {e}")
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞: {e}")
                else:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ {dt_col} –∏ {tgt_col} –¥–ª—è –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")
        
        # 4.2 –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        with ts_tabs[1]:
            st.subheader("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feat_tabs = st.tabs(["–í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", "–õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", "–°–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"])
            
            # 4.2.1 –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            with feat_tabs[0]:
                st.write("#### –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —Ç.–¥.)")
                
                time_features = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
                    [
                        'year', 'month', 'day', 'dayofweek', 'quarter', 'hour', 'minute',
                        'is_weekend', 'is_month_start', 'is_month_end',
                        'sin_month', 'cos_month', 'sin_day', 'cos_day',
                        'sin_dayofweek', 'cos_dayofweek'
                    ],
                    default=['year', 'month', 'dayofweek', 'is_weekend', 'sin_month', 'cos_month'],
                    key="time_features"
                )
                
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", key="generate_time_features_btn"):
                    if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤..."):
                            if time_features:
                                try:
                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                                    df_with_time_features = add_time_features(df_analysis, dt_col, features=time_features)
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                                    st.subheader("–ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                                    display_cols = [dt_col] + [f for f in time_features if f in df_with_time_features.columns]
                                    st.dataframe(df_with_time_features[display_cols].head(10))
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["df_with_time_features"] = df_with_time_features
                                    
                                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏", key="use_time_features_btn"):
                                        st.session_state["df_analysis"] = df_with_time_features
                                        st.success("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏!")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                            else:
                                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏–∑–Ω–∞–∫.")
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É –¥–∞—Ç—ã {dt_col} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                if "df_with_time_features" in st.session_state:
                    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
                    download_excel(st.session_state["df_with_time_features"], "time_features_data.xlsx")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    show_data_usage_info("–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                    st.info("""
                    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
                    
                    –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –º–æ–¥–µ–ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç—å. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã:
                    
                    - `sin_month` –∏ `cos_month` - —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤
                    - `is_weekend` - –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π
                    - `quarter` - –∫–≤–∞—Ä—Ç–∞–ª –≥–æ–¥–∞
                    
                    –ü—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —É—á–µ—Å—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö.
                    """)
            
            # 4.2.2 –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            with feat_tabs[1]:
                st.write("#### –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–µ—Ä–∏–æ–¥–æ–≤)")
                
                # –í–≤–æ–¥ –ª–∞–≥–æ–≤ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                lag_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥—ã –ª–∞–≥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,7,14,28)",
                    value="1,7,14,28",
                    key="lag_input"
                )
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
                try:
                    lag_periods = [int(x.strip()) for x in lag_input.split(",") if x.strip()]
                except ValueError:
                    st.error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
                    lag_periods = []
                
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", key="generate_lag_features_btn"):
                    if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns and tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤..."):
                            if lag_periods:
                                try:
                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                                    df_with_lags = generate_lag_features(
                                        df_analysis, tgt_col, dt_col, 
                                        id_col if id_col != "<–Ω–µ—Ç>" and id_col in df_analysis.columns else None, 
                                        lag_periods=lag_periods
                                    )
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                                    lag_columns = [f"{tgt_col}_lag_{lag}" for lag in lag_periods if f"{tgt_col}_lag_{lag}" in df_with_lags.columns]
                                    
                                    st.subheader("–ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                                    display_cols = [dt_col, tgt_col] + lag_columns
                                    if id_col != "<–Ω–µ—Ç>" and id_col in df_with_lags.columns:
                                        display_cols.insert(0, id_col)
                                    
                                    st.dataframe(df_with_lags[display_cols].head(10))
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["df_with_lags"] = df_with_lags
                                    
                                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ NaN –≤ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                                    na_counts = df_with_lags[lag_columns].isna().sum()
                                    
                                    st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (NaN) –≤ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö")
                                    st.dataframe(na_counts)
                                    
                                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ª–∞–≥–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏", key="use_lag_features_btn"):
                                        st.session_state["df_analysis"] = df_with_lags
                                        st.success("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –ª–∞–≥–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏!")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                            else:
                                st.warning("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–∏–æ–¥ –ª–∞–≥–∞.")
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ {dt_col} –∏ {tgt_col} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                if "df_with_lags" in st.session_state:
                    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ª–∞–≥–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
                    download_excel(st.session_state["df_with_lags"], "lag_features_data.xlsx")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    show_data_usage_info("–ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∞–≥–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                    st.info("""
                    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
                    
                    –õ–∞–≥–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–≤–æ–ª—è—é—Ç –º–æ–¥–µ–ª–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å:
                    
                    - –ù–µ–¥–∞–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é (–ª–∞–≥–∏ 1-7)
                    - –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (–ª–∞–≥–∏ 7-30)
                    - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–ª–∞–≥–∏ > 30)
                    
                    –ü—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ –ª–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞.
                    –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏ (NaN) –≤ –Ω–∞—á–∞–ª–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤.
                    """)
            
            # 4.2.3 –°–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            with feat_tabs[2]:
                st.write("#### –°–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –æ–∫–Ω–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π)")
                
                # –í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω
                window_input = st.text_input(
                    "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7,14,30)",
                    value="7,14,30",
                    key="window_input"
                )
                
                # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π
                window_functions = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö –æ–∫–æ–Ω",
                    ["mean", "std", "min", "max"],
                    default=["mean", "std"],
                    key="window_functions"
                )
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
                try:
                    windows = [int(x.strip()) for x in window_input.split(",") if x.strip()]
                except ValueError:
                    st.error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.")
                    windows = []
                
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏", key="generate_rolling_features_btn"):
                    if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns and tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤..."):
                            if windows and window_functions:
                                try:
                                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                                    df_with_rolling = generate_rolling_features(
                                        df_analysis, tgt_col, dt_col, 
                                        id_col if id_col != "<–Ω–µ—Ç>" and id_col in df_analysis.columns else None,
                                        windows=windows, functions=window_functions
                                    )
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                                    rolling_columns = [
                                        f"{tgt_col}_rolling_{window}_{func}"
                                        for window in windows
                                        for func in window_functions
                                        if f"{tgt_col}_rolling_{window}_{func}" in df_with_rolling.columns
                                    ]
                                    
                                    st.subheader("–ü—Ä–∏–º–µ—Ä—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                                    display_cols = [dt_col, tgt_col] 
                                    if rolling_columns:
                                        display_cols.extend(rolling_columns[:3])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                                    if id_col != "<–Ω–µ—Ç>" and id_col in df_with_rolling.columns:
                                        display_cols.insert(0, id_col)
                                    
                                    st.dataframe(df_with_rolling[display_cols].head(10))
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                                    st.subheader("–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                                    st.write(rolling_columns)
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["df_with_rolling"] = df_with_rolling
                                    
                                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏", key="use_rolling_features_btn"):
                                        st.session_state["df_analysis"] = df_with_rolling
                                        st.success("–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å–æ —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏!")
                                except Exception as e:
                                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
                            else:
                                st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –∏ –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é.")
                    else:
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ {dt_col} –∏ {tgt_col} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                if "df_with_rolling" in st.session_state:
                    st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
                    
                    # –ö–Ω–æ–ø–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Excel
                    download_excel(st.session_state["df_with_rolling"], "rolling_features_data.xlsx")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    show_data_usage_info("—Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫–æ–ª—å–∑—è—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
                    st.info("""
                    **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**
                    
                    –°–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (rolling features) –ø–æ–º–æ–≥–∞—é—Ç –≤—ã—è–≤–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã –∏ —Å–Ω–∏–∑–∏—Ç—å —à—É–º –≤ –¥–∞–Ω–Ω—ã—Ö:
                    
                    - –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (`mean`) - —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ä—è–¥, –≤—ã—è–≤–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã
                    - –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (`std`) - –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    - –°–∫–æ–ª—å–∑—è—â–∏–µ –º–∏–Ω–∏–º—É–º/–º–∞–∫—Å–∏–º—É–º (`min`/`max`) - –≤—ã—è–≤–ª—è—é—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
                    
                    –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ª–∞–≥–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏.
                    –î–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —Å–∫–æ–ª—å–∑—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ä—è–¥–æ–≤.
                    """)
    
    # 5. –í–∫–ª–∞–¥–∫–∞ –≤—ã—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞
    with tabs[4]:
        st.header("–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞")
        
        st.write("""
        –ö–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç - —ç—Ç–æ —è–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å —Ç–µ—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.
        –î–ª—è –µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ (train) –∏ –Ω–æ–≤—ã–µ (test).
        """)
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        split_method = st.radio(
            "–°–ø–æ—Å–æ–± —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            ["–ü–æ –¥–∞—Ç–µ", "–ü–æ –¥–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö"],
            key="drift_split_method"
        )
        
        if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns and tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
            if split_method == "–ü–æ –¥–∞—Ç–µ":
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—ã
                if not pd.api.types.is_datetime64_any_dtype(df_analysis[dt_col]):
                    df_dates = df_analysis.copy()
                    df_dates[dt_col] = pd.to_datetime(df_dates[dt_col], errors="coerce")
                else:
                    df_dates = df_analysis
                
                min_date = df_dates[dt_col].min().date()
                max_date = df_dates[dt_col].max().date()
                
                # –í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                split_date = st.date_input(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                    value=pd.Timestamp(max_date) - pd.Timedelta(days=30),
                    min_value=pd.Timestamp(min_date),
                    max_value=pd.Timestamp(max_date),
                    key="drift_split_date"
                )
                
                if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç", key="check_drift_btn"):
                    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞..."):
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ timestamp
                            split_timestamp = pd.Timestamp(split_date)
                            
                            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            historical_df = df_dates[df_dates[dt_col] < split_timestamp]
                            new_df = df_dates[df_dates[dt_col] >= split_timestamp]
                            
                            if len(historical_df) < 10 or len(new_df) < 10:
                                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                            else:
                                st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(historical_df)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∏ {len(new_df)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                
                                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞
                                drift_results = detect_concept_drift(
                                    historical_df, new_df, tgt_col, dt_col, 
                                    id_col if id_col != "<–Ω–µ—Ç>" and id_col in df_analysis.columns else None
                                )
                                display_drift_results(drift_results)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞: {e}")
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞: {e}")
            else:  # –ü–æ –¥–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö
                # –í—ã–±–æ—Ä –¥–æ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
                test_size = st.slider(
                    "–î–æ–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    min_value=0.1,
                    max_value=0.5,
                    value=0.2,
                    step=0.05,
                    key="drift_test_size"
                )
                
                if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç", key="check_drift_ratio_btn"):
                    with st.spinner("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞..."):
                        try:
                            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime
                            if not pd.api.types.is_datetime64_any_dtype(df_analysis[dt_col]):
                                df_dates = df_analysis.copy()
                                df_dates[dt_col] = pd.to_datetime(df_dates[dt_col], errors="coerce")
                            else:
                                df_dates = df_analysis
                            
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ
                            df_sorted = df_dates.sort_values(dt_col)
                            
                            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                            split_idx = int(len(df_sorted) * (1 - test_size))
                            historical_df = df_sorted.iloc[:split_idx]
                            new_df = df_sorted.iloc[split_idx:]
                            
                            if len(historical_df) < 10 or len(new_df) < 10:
                                st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                            else:
                                st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(historical_df)} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∏ {len(new_df)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                
                                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–∏—Ñ—Ç–∞
                                drift_results = detect_concept_drift(
                                    historical_df, new_df, tgt_col, dt_col, 
                                    id_col if id_col != "<–Ω–µ—Ç>" and id_col in df_analysis.columns else None
                                )
                                display_drift_results(drift_results)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞: {e}")
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞: {e}")
        else:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ {dt_col} and {tgt_col} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ü–µ–ø—Ç-–¥—Ä–∏—Ñ—Ç–∞")
    
    # 6. –í–∫–ª–∞–¥–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    with tabs[5]:
        st.header("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏")
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        split_method = st.radio(
            "–°–ø–æ—Å–æ–± —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            ["–ü–æ –¥–∞—Ç–µ", "–ü–æ –¥–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö"],
            key="split_method"
        )
        
        if dt_col and dt_col != "<–Ω–µ—Ç>" and dt_col in df_analysis.columns:
            if split_method == "–ü–æ –¥–∞—Ç–µ":
                # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—ã
                if not pd.api.types.is_datetime64_any_dtype(df_analysis[dt_col]):
                    df_dates = df_analysis.copy()
                    df_dates[dt_col] = pd.to_datetime(df_dates[dt_col], errors="coerce")
                else:
                    df_dates = df_analysis
                
                min_date = df_dates[dt_col].min().date()
                max_date = df_dates[dt_col].max().date()
                
                # –í—ã–±–æ—Ä –¥–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                split_date = st.date_input(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è",
                    value=pd.Timestamp(max_date) - pd.Timedelta(days=30),
                    min_value=pd.Timestamp(min_date),
                    max_value=pd.Timestamp(max_date),
                    key="split_date"
                )
                
                # –û–ø—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
                use_validation = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É", key="use_validation")
                
                if use_validation:
                    val_date = st.date_input(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏",
                        value=pd.Timestamp(split_date) - pd.Timedelta(days=30),
                        min_value=pd.Timestamp(min_date),
                        max_value=pd.Timestamp(split_date),
                        key="val_date"
                    )
                
                if st.button("–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="split_data_btn"):
                    with st.spinner("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                        try:
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ timestamp
                            split_timestamp = pd.Timestamp(split_date)
                            
                            if use_validation:
                                val_timestamp = pd.Timestamp(val_date)
                                
                                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                train_df = df_dates[df_dates[dt_col] < val_timestamp]
                                val_df = df_dates[(df_dates[dt_col] >= val_timestamp) & (df_dates[dt_col] < split_timestamp)]
                                test_df = df_dates[df_dates[dt_col] >= split_timestamp]
                                
                                if len(train_df) < 10 or len(val_df) < 10 or len(test_df) < 10:
                                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                                else:
                                    st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(train_df)} –æ–±—É—á–∞—é—â–∏—Ö, {len(val_df)} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ {len(test_df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["train_df"] = train_df
                                    st.session_state["val_df"] = val_df
                                    st.session_state["test_df"] = test_df
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                    if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                                        train_df['dataset'] = 'Train'
                                        val_df['dataset'] = 'Validation'
                                        test_df['dataset'] = 'Test'
                                        
                                        combined_df = pd.concat([train_df, val_df, test_df])
                                        
                                        fig = px.box(
                                            combined_df, x='dataset', y=tgt_col,
                                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –≤—ã–±–æ—Ä–∫–∞–º"
                                        )
                                        st.plotly_chart(fig, use_container_width=True)
                            else:
                                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                train_df = df_dates[df_dates[dt_col] < split_timestamp]
                                test_df = df_dates[df_dates[dt_col] >= split_timestamp]
                                
                                if len(train_df) < 10 or len(test_df) < 10:
                                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                                else:
                                    st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(train_df)} –æ–±—É—á–∞—é—â–∏—Ö –∏ {len(test_df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["train_df"] = train_df
                                    st.session_state["test_df"] = test_df
                                    st.session_state["val_df"] = None
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                    if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                                        train_df['dataset'] = 'Train'
                                        test_df['dataset'] = 'Test'
                                        
                                        combined_df = pd.concat([train_df, test_df])
                                        
                                        fig = px.box(
                                            combined_df, x='dataset', y=tgt_col,
                                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –≤—ã–±–æ—Ä–∫–∞–º"
                                        )
                                        st.plotly_chart(fig, use_container_width=True)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            else:  # –ü–æ –¥–æ–ª–µ –¥–∞–Ω–Ω—ã—Ö
                # –í—ã–±–æ—Ä –¥–æ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
                test_size = st.slider(
                    "–î–æ–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                    min_value=0.1,
                    max_value=0.5,
                    value=0.2,
                    step=0.05,
                    key="test_size"
                )
                
                # –û–ø—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏
                use_validation = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É", key="use_validation_ratio")
                
                if use_validation:
                    val_size = st.slider(
                        "–î–æ–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                        min_value=0.05,
                        max_value=0.3,
                        value=0.1,
                        step=0.05,
                        key="val_size"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º–∞ –¥–æ–ª–µ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 0.8
                    if test_size + val_size > 0.8:
                        st.warning("–°—É–º–º–∞—Ä–Ω–∞—è –¥–æ–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å.")
                
                if st.button("–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="split_data_ratio_btn"):
                    with st.spinner("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö..."):
                        try:
                            if use_validation:
                                train_df, test_df, val_df = split_train_test(
                                    df_analysis, dt_col, test_size=test_size, validation_size=val_size
                                )
                                
                                if len(train_df) < 10 or len(val_df) < 10 or len(test_df) < 10:
                                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                                else:
                                    st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(train_df)} –æ–±—É—á–∞—é—â–∏—Ö, {len(val_df)} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ {len(test_df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["train_df"] = train_df
                                    st.session_state["val_df"] = val_df
                                    st.session_state["test_df"] = test_df
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                    if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                                        train_df['dataset'] = 'Train'
                                        val_df['dataset'] = 'Validation'
                                        test_df['dataset'] = 'Test'
                                        
                                        combined_df = pd.concat([train_df, val_df, test_df])
                                        
                                        fig = px.box(
                                            combined_df, x='dataset', y=tgt_col,
                                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –≤—ã–±–æ—Ä–∫–∞–º"
                                        )
                                        st.plotly_chart(fig, use_container_width=True)
                            else:
                                train_df, test_df, _ = split_train_test(
                                    df_analysis, dt_col, test_size=test_size, validation_size=0.0
                                )
                                
                                if len(train_df) < 10 or len(test_df) < 10:
                                    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–∞–∂–¥–æ–π –≤—ã–±–æ—Ä–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã 10 –∑–∞–ø–∏—Å–µ–π.")
                                else:
                                    st.success(f"–î–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã: {len(train_df)} –æ–±—É—á–∞—é—â–∏—Ö –∏ {len(test_df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ session_state
                                    st.session_state["train_df"] = train_df
                                    st.session_state["test_df"] = test_df
                                    st.session_state["val_df"] = None
                                    
                                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                                    if tgt_col and tgt_col != "<–Ω–µ—Ç>" and tgt_col in df_analysis.columns:
                                        train_df['dataset'] = 'Train'
                                        test_df['dataset'] = 'Test'
                                        
                                        combined_df = pd.concat([train_df, test_df])
                                        
                                        fig = px.box(
                                            combined_df, x='dataset', y=tgt_col,
                                            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ –≤—ã–±–æ—Ä–∫–∞–º"
                                        )
                                        st.plotly_chart(fig, use_container_width=True)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {dt_col} –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if "train_df" in st.session_state and "test_df" in st.session_state:
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", key="use_train_analysis_btn"):
                    st.session_state["df_analysis"] = st.session_state["train_df"]
                    st.success("–¢–µ–ø–µ—Ä—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞!")
            
            with col2:
                if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", key="use_test_analysis_btn"):
                    st.session_state["df_analysis"] = st.session_state["test_df"]
                    st.success("–¢–µ–ø–µ—Ä—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞!")
        
        # –ü–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        if "train_df" in st.session_state and "test_df" in st.session_state:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏
            st.write("#### –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞")
            download_excel(st.session_state["train_df"], "train_data.xlsx")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏
            st.write("#### –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞")
            download_excel(st.session_state["test_df"], "test_data.xlsx")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if st.session_state.get("val_df") is not None:
                st.write("#### –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞")
                download_excel(st.session_state["val_df"], "validation_data.xlsx")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            st.info("""
            **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
            
            1. **–û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            2. **–í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            3. **–¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞** –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
            
            –í—ã –º–æ–∂–µ—Ç–µ:
            - –í—ã–≥—Ä—É–∑–∏—Ç—å –∫–∞–∂–¥—É—é –≤—ã–±–æ—Ä–∫—É –≤ Excel –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
            - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –∏–∑ –≤—ã–±–æ—Ä–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            """)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.sidebar.subheader("üîç –û —Ä–∞–±–æ—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏")
    st.sidebar.info("""
    **–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:**
    
    1. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ç.–¥.) 
       –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.
       
    2. –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ "–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel".
    
    3. –í –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.
    
    4. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –∑–∞–≥—Ä—É–∑–∏–≤ –∏—Ö –∑–∞–Ω–æ–≤–æ.
    """)