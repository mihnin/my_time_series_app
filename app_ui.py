# app_ui.py
import streamlit as st
import yaml
import os
import pandas as pd
import plotly.express as px
import psutil
import gc

from src.data.data_processing import load_data, show_dataset_stats



CONFIG_PATH = "config/config.yaml"

def load_config(path: str):
    if not os.path.exists(path):
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    with open(path, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)
    metrics_dict = data.get("metrics_dict", {})
    ag_models = data.get("ag_models", {})
    return metrics_dict, ag_models

METRICS_DICT, AG_MODELS = load_config(CONFIG_PATH)
metrics_list = list(METRICS_DICT.keys())
presets_list = ["fast_training", "medium_quality", "high_quality", "best_quality"]
all_models_opt = "* (–≤—Å–µ)"
model_keys = list(AG_MODELS.keys())
model_choices = [all_models_opt] + model_keys

def setup_ui():
    # –°—Ç–∏–ª–∏–∑—É–µ–º –∫–Ω–æ–ø–∫–∏: –∫—Ä–∞—Å–Ω–∞—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –≥–æ–ª—É–±—ã–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    button_css = """
    <style>
    /* –û–±—â–∏–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ - –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ */
    div[data-testid="stButton"] button {
        width: 100%;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–∫—Ä–∞—Å–Ω–∞—è —Å –±–µ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º) */
    div[data-testid="stButton"] button[kind="secondary"][data-testid="StyledFullScreenButton"] {
        background-color: #E53935;
        color: white;
    }

    /* –°—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–≥–æ–ª—É–±—ã–µ) */
    div[data-testid="stButton"] button[kind="secondary"]:not([data-testid="StyledFullScreenButton"]) {
        background-color: #2196F3;
        color: white;
    }
    </style>
    """
    st.sidebar.markdown(button_css, unsafe_allow_html=True)

    st.markdown("### –í–µ—Ä—Å–∏—è 3.0")
    st.title("–ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    pages = ["–ì–ª–∞–≤–Ω–∞—è", "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "Help"]
    page_choice = st.sidebar.selectbox("–ù–∞–≤–∏–≥–∞—Ü–∏—è", pages, key="page_choice")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    session_keys = [
        "df", "predictor", "leaderboard", "predictions", "fit_summary",
        "static_df_train", "static_df_fore", "best_model_name", "best_model_score",
        "df_forecast", "metric_key", "presets_key", "models_key"
    ]
    for key in session_keys:
        if key not in st.session_state:
            if key == "metric_key":
                st.session_state[key] = metrics_list[0]
            elif key == "presets_key":
                st.session_state[key] = "high_quality"
            elif key == "models_key":
                st.session_state[key] = [all_models_opt]
            else:
                st.session_state[key] = None
    
    if "df_forecast" in st.session_state:
        del st.session_state["df_forecast"]
    if "static_df_fore" in st.session_state:
        del st.session_state["static_df_fore"]
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–ø—Ä–∞–≤–∫–∏, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã UI
    if page_choice in ["–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "Help"]:
        return page_choice
    
    # ========== (1) –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ==========
    st.sidebar.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    with st.sidebar.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"):
        chunk_size = st.number_input(
            "–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (—Å—Ç—Ä–æ–∫)",
            min_value=1000,
            max_value=1000000,
            value=100000,
            step=10000,
            help="–î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>100 –ú–ë) –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è —á–∞—Å—Ç—è–º–∏. –ó–∞–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏."
        )
    
    train_file = st.sidebar.file_uploader("Train (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", type=["csv", "xls", "xlsx"], key="train_file_uploader")
    if st.sidebar.button("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", key="load_data_btn"):
        if not train_file:
            st.error("Train-—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")
        else:
            try:
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                    df_train = load_data(train_file, chunk_size=chunk_size)
                    st.session_state["df"] = df_train
                    st.success(f"Train-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! –°—Ç—Ä–æ–∫: {len(df_train)}, –∫–æ–ª–æ–Ω–æ–∫: {len(df_train.columns)}")
                    
                    # –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±–æ—Ä–∫—É –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏
                    if len(df_train) > 1000:
                        st.dataframe(df_train.head(1000))
                        st.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 1000 –∏–∑ {len(df_train)} —Å—Ç—Ä–æ–∫.")
                    else:
                        st.dataframe(df_train)
                    
                    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Train")
                    show_dataset_stats(df_train)
                    
                    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å, –µ—Å–ª–∏ –µ—ë –º–∞–ª–æ
                    memory_usage = psutil.Process(os.getpid()).memory_info().rss / (1024 * 1024 * 1024)  # –≤ –ì–ë
                    if memory_usage > 1.5:  # –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ 1.5 –ì–ë
                        gc.collect()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    # ========== (2) –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ ==========
    st.sidebar.header("2. –ö–æ–ª–æ–Ω–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    df_current = st.session_state.get("df")
    all_cols = list(df_current.columns) if df_current is not None else []
    
    if "dt_col_key" not in st.session_state:
        st.session_state["dt_col_key"] = "<–Ω–µ—Ç>"
    if "tgt_col_key" not in st.session_state:
        st.session_state["tgt_col_key"] = "<–Ω–µ—Ç>"
    if "id_col_key" not in st.session_state:
        st.session_state["id_col_key"] = "<–Ω–µ—Ç>"
    
    dt_stored = st.session_state["dt_col_key"]
    tgt_stored = st.session_state["tgt_col_key"]
    id_stored = st.session_state["id_col_key"]
    
    if dt_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["dt_col_key"] = "<–Ω–µ—Ç>"
    if tgt_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["tgt_col_key"] = "<–Ω–µ—Ç>"
    if id_stored not in ["<–Ω–µ—Ç>"] + all_cols:
        st.session_state["id_col_key"] = "<–Ω–µ—Ç>"
    
    dt_col = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –¥–∞—Ç–æ–π", ["<–Ω–µ—Ç>"] + all_cols, key="dt_col_key")
    tgt_col = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ target", ["<–Ω–µ—Ç>"] + all_cols, key="tgt_col_key")
    id_col = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ ID (–∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π)", ["<–Ω–µ—Ç>"] + all_cols, key="id_col_key")
    
    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    st.sidebar.header("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (–¥–æ 3)")
    if "static_feats_key" not in st.session_state:
        st.session_state["static_feats_key"] = []
    existing_static_feats = st.session_state["static_feats_key"]
    possible_static = [c for c in all_cols if c not in [dt_col, tgt_col, id_col, "<–Ω–µ—Ç>"]]
    filtered_feats = [feat for feat in existing_static_feats if feat in possible_static]
    if len(filtered_feats) != len(existing_static_feats):
        st.session_state["static_feats_key"] = filtered_feats
    
    static_feats = st.sidebar.multiselect("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏:", possible_static, key="static_feats_key")
    
    if "use_holidays_key" not in st.session_state:
        st.session_state["use_holidays_key"] = False
    st.sidebar.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –†–§?", value=st.session_state["use_holidays_key"], key="use_holidays_key")
    
    # ========== (3) –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ==========
    st.sidebar.header("3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")
    # –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π selectbox –¥–ª—è fill_method –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
    fill_options = [
        "None (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)", 
        "Constant=0 (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω—É–ª–∏)", 
        "Group mean (—Å—Ä–µ–¥–Ω–µ–µ –ø–æ –≥—Ä—É–ø–ø–µ)", 
        "Forward fill (–ø—Ä–æ—Ç—è–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è)", 
        "Interpolate (–ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è)", 
        "KNN imputer (k –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π)"
    ]
    fill_map = {opt: opt.split(" ")[0] for opt in fill_options}
    selected_fill = st.sidebar.selectbox(
        "–°–ø–æ—Å–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤", 
        fill_options, 
        key="fill_method_display"
    )
    st.session_state["fill_method_key"] = fill_map[selected_fill]
    
    if "group_cols_for_fill_key" not in st.session_state:
        st.session_state["group_cols_for_fill_key"] = []
    st.sidebar.multiselect("–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", static_feats, key="group_cols_for_fill_key")
    
    # ========== (4) –ß–∞—Å—Ç–æ—Ç–∞ (freq) ==========
    st.sidebar.header("4. –ß–∞—Å—Ç–æ—Ç–∞ (freq)")
    freq_options = ["auto (—É–≥–∞–¥–∞—Ç—å)", "D (–¥–µ–Ω—å)", "H (—á–∞—Å)", "M (–º–µ—Å—è—Ü)", "B (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)", "W (–Ω–µ–¥–µ–ª—è)", "Q (–∫–≤–∞—Ä—Ç–∞–ª)"]
    if "freq_key" not in st.session_state:
        st.session_state["freq_key"] = "auto (—É–≥–∞–¥–∞—Ç—å)"
    st.sidebar.selectbox("freq", freq_options, index=0, key="freq_key")
    
    # ========== (5) –ú–µ—Ç—Ä–∏–∫–∞ –∏ –º–æ–¥–µ–ª–∏ ==========
    st.sidebar.header("5. –ú–µ—Ç—Ä–∏–∫–∞ –∏ –º–æ–¥–µ–ª–∏")
    st.sidebar.selectbox("–ú–µ—Ç—Ä–∏–∫–∞", metrics_list, index=metrics_list.index(st.session_state["metric_key"]), key="metric_key")
    st.sidebar.multiselect("–ú–æ–¥–µ–ª–∏ AutoGluon", model_choices, key="models_key")
    st.sidebar.selectbox("Presets", presets_list, index=presets_list.index(st.session_state["presets_key"]), key="presets_key")
    st.sidebar.number_input(
        "prediction_length", 
        1, 365, 3, 
        key="prediction_length_key",
        help="–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –±—É–¥—É—â–µ–º). –ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –æ–±—É—á–µ–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥."
    )
    
    st.sidebar.number_input(
        "time_limit (sec)", 
        10, 36000, None, 
        key="time_limit_key",
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π. –ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ.",
        placeholder="–ü–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"
    )
    
    st.sidebar.checkbox(
        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–µ–µ (mean)?", 
        value=st.session_state.get("mean_only_key", False), 
        key="mean_only_key",
        help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0.5 –∫–≤–∞–Ω—Ç–∏–ª—å). –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ, –±—É–¥—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∫–≤–∞–Ω—Ç–∏–ª–∏ (0.1, 0.5, 0.9), —á—Ç–æ –¥–∞—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏."
    )
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    if df_current is not None and dt_col != "<–Ω–µ—Ç>" and tgt_col != "<–Ω–µ—Ç>":
        try:
            with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞..."):
                df_plot = df_current.copy()
                
                # –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±–æ—Ä–∫—É –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
                if len(df_plot) > 10000:
                    st.info(f"–î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±–æ—Ä–∫–∞ –∏–∑ 10000 —Ç–æ—á–µ–∫ (–∏–∑ {len(df_plot)} —Å—Ç—Ä–æ–∫).")
                    # –ï—Å–ª–∏ –µ—Å—Ç—å ID, –±–µ—Ä–µ–º –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ ID
                    if id_col != "<–Ω–µ—Ç>":
                        ids = df_plot[id_col].unique()
                        if len(ids) > 10:
                            selected_ids = ids[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 ID
                            df_plot = df_plot[df_plot[id_col].isin(selected_ids)]
                        
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ—á–µ–∫
                        if len(df_plot) > 10000:
                            df_plot = df_plot.sample(10000, random_state=42)
                    else:
                        df_plot = df_plot.sample(10000, random_state=42)
                
                df_plot[dt_col] = pd.to_datetime(df_plot[dt_col], errors="coerce", dayfirst=True)
                df_plot = df_plot.dropna(subset=[dt_col])
                
                if id_col != "<–Ω–µ—Ç>":
                    fig_target = px.line(df_plot.sort_values(dt_col), x=dt_col, y=tgt_col, color=id_col, title="–ì—Ä–∞—Ñ–∏–∫ Target –ø–æ ID")
                else:
                    fig_target = px.line(df_plot.sort_values(dt_col), x=dt_col, y=tgt_col, title="–ì—Ä–∞—Ñ–∏–∫ Target (–±–µ–∑ ID)")
                
                fig_target.update_layout(height=400)
                st.subheader("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ Target")
                st.plotly_chart(fig_target, use_container_width=True)
                
                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
                del df_plot
                gc.collect()
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
    
    # ========== (6) –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ==========
    st.sidebar.header("6. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
    st.sidebar.checkbox("–û–±—É—á–µ–Ω–∏–µ, –ü—Ä–æ–≥–Ω–æ–∑ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", key="train_predict_save_checkbox")
    st.sidebar.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", key="fit_model_btn", type="primary")
    
    # ========== (7) –ü—Ä–æ–≥–Ω–æ–∑ ==========
    st.sidebar.header("7. –ü—Ä–æ–≥–Ω–æ–∑")
    st.sidebar.button("üìä –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", key="predict_btn")
    
    # ========== (8) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ==========
    st.sidebar.header("8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV", key="save_csv_btn")
    st.sidebar.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel", key="save_excel_btn")
    
    # ========== (9) –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========
    st.sidebar.header("9. –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.sidebar.button("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏", key="show_logs_btn")
    st.sidebar.button("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏", key="download_logs_btn")
    
    # ========== (10) –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –ª–æ–≥–æ–≤ ==========
    st.sidebar.header("10. –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –ª–æ–≥–æ–≤")
    st.sidebar.button("üì¶ –°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ (–º–æ–¥–µ–ª–∏ + –ª–æ–≥–∏)", key="download_model_and_logs")
    
    return page_choice