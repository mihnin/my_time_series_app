# app.py
# app.py
import streamlit as st
import logging
import os
import zipfile
import io
import pandas as pd
import psutil
from openpyxl.styles import PatternFill

from app_ui import setup_ui
from app_training import run_training
from app_prediction import run_prediction
from app_saving import try_load_existing_model, save_model_metadata, load_model_metadata
from src.utils.utils import setup_logger, read_logs, LOG_FILE
from src.help_page import show_help_page
from src.utils.exporter import generate_excel_buffer
from data_analysis import run_data_analysis

# –≠—Ç–æ —Ñ–∏–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ - https://github.com/VikParuchuri/marker/issues/442 
import torch
torch.classes.__path__ = []


def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Streamlit –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    st.set_page_config(
        page_title="–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤", 
        page_icon="üìà", 
        layout="wide",  # –®–∏—Ä–æ–∫–∏–π –º–∞–∫–µ—Ç
        initial_sidebar_state="expanded"  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∞–π–¥–±–∞—Ä
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    setup_logger()
    logging.info("========== –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ ========== ")
    logging.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit (main) ===")
    
    # –í –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤—å—Ç–µ:
    if "predictor" not in st.session_state or st.session_state["predictor"] is None:
        try:
            from autogluon.timeseries import TimeSeriesPredictor
            model_path = "AutogluonModels/TimeSeriesModel"
            if os.path.exists(model_path):
                st.session_state["predictor"] = TimeSeriesPredictor.load(model_path)
                st.success("–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å: {e}")
    
    # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
    if "predictor" in st.session_state and st.session_state["predictor"] is not None:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–∂–µ –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã, –Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ
        if "predictions" in st.session_state and "graphs_data" not in st.session_state:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            preds = st.session_state["predictions"]
            if preds is not None and "0.5" in preds.columns:
                preds_df = preds.reset_index().rename(columns={"0.5": "prediction"})
                unique_ids = preds_df["item_id"].unique()
                
                if "graphs_data" not in st.session_state:
                    st.session_state["graphs_data"] = {}
                
                st.session_state["graphs_data"]["preds_df"] = preds_df
                st.session_state["graphs_data"]["unique_ids"] = unique_ids
    
    # –†–∏—Å—É–µ–º –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∏ –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page_choice = setup_ui()
    logging.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞: {page_choice}")
    
    # –õ–æ–≥ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dt_col = st.session_state.get("dt_col_key", "<–Ω–µ—Ç>")
    tgt_col = st.session_state.get("tgt_col_key", "<–Ω–µ—Ç>")
    id_col = st.session_state.get("id_col_key", "<–Ω–µ—Ç>")
    
    static_feats = st.session_state.get("static_feats_key", [])
    use_holidays = st.session_state.get("use_holidays_key", False)
    fill_method_val = st.session_state.get("fill_method_key", "None")
    group_cols_val = st.session_state.get("group_cols_for_fill_key", [])
    freq_val = st.session_state.get("freq_key", "auto (—É–≥–∞–¥–∞—Ç—å)")
    
    metric_val = st.session_state.get("metric_key", "MASE (Mean absolute scaled error)")
    models_val = st.session_state.get("models_key", ["* (–≤—Å–µ)"])
    presets_val = st.session_state.get("presets_key", "high_quality")
    prediction_length_val = st.session_state.get("prediction_length_key", 3)
    time_limit_val = st.session_state.get("time_limit_key", None)
    mean_only_val = st.session_state.get("mean_only_key", False)
    
    logging.info(
        f"–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: dt_col={dt_col}, tgt_col={tgt_col}, id_col={id_col}"
    )
    logging.info(
        f"–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏={static_feats}, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏={use_holidays}, "
        f"–º–µ—Ç–æ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è={fill_method_val}, group_cols={group_cols_val}"
    )
    logging.info(
        f"freq={freq_val}, metric={metric_val}, models={models_val}, presets={presets_val}, "
        f"pred_len={prediction_length_val}, time_limit={time_limit_val}, mean_only={mean_only_val}"
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏
    process = psutil.Process(os.getpid())
    memory_usage = process.memory_info().rss / (1024 * 1024)  # –≤ –ú–ë
    st.sidebar.markdown(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏**: {memory_usage:.2f} –ú–ë")
    
    # ------------- –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ -------------
    st.sidebar.header("–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
    clear_logs_input = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ 'delete', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏:")
    if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
        if clear_logs_input.strip().lower() == "delete":
            logger = logging.getLogger()
            for handler in logger.handlers[:]:
                if hasattr(handler, 'baseFilename') and os.path.abspath(handler.baseFilename) == os.path.abspath(LOG_FILE):
                    handler.close()
                    logger.removeHandler(handler)
            try:
                if os.path.exists(LOG_FILE):
                    os.remove(LOG_FILE)
                    st.warning("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!")
                    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª –ª–æ–≥–∏ (—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω).")
                else:
                    st.info("–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ª–æ–≥-—Ñ–∞–π–ª
            try:
                with open(LOG_FILE, 'w', encoding='utf-8') as f:
                    f.write("")
                from logging import Formatter
                new_file_handler = logging.FileHandler(LOG_FILE, mode='a', encoding='utf-8')
                formatter = Formatter(
                    "%(asctime)s [%(levelname)s] %(module)s.%(funcName)s - %(message)s",
                    datefmt="%Y-%m-%d %H:%M:%S"
                )
                new_file_handler.setFormatter(formatter)
                logger.addHandler(new_file_handler)
                logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π log-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞: {e}")
        else:
            st.warning("–ù–µ–≤–µ—Ä–Ω–æ–µ —Å–ª–æ–≤–æ. –õ–æ–≥–∏ –Ω–µ –æ—á–∏—â–µ–Ω—ã.")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
    if st.sidebar.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å"):
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
        for key in list(st.session_state.keys()):
            if key not in ["df", "predictor", "page_choice", "dt_col_key", "tgt_col_key", "id_col_key", 
                          "static_feats_key", "use_holidays_key", "fill_method_key", "group_cols_for_fill_key",
                          "freq_key", "metric_key", "models_key", "presets_key", "prediction_length_key",
                          "time_limit_key", "mean_only_key"]:
                del st.session_state[key]
        
        import gc
        gc.collect()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
        process = psutil.Process(os.getpid())
        memory_usage = process.memory_info().rss / (1024 * 1024)  # –≤ –ú–ë
        st.sidebar.success(f"–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {memory_usage:.2f} –ú–ë")
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Help ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –∏ –≤—ã—Ö–æ–¥–∏–º
    if page_choice == "Help":
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Help.")
        show_help_page()
        return
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã—Ö–æ–¥–∏–º
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ –≤—ã—Ö–æ–¥–∏–º
    if page_choice == "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö":
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
        try:
            run_data_analysis()
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –≤ run_data_analysis: {e}")
        return
    
    # ------------- –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ -------------
    if st.session_state.get("fit_model_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å' –Ω–∞–∂–∞—Ç–∞.")
        train_success = run_training()
        if train_success:
            logging.info("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            save_model_metadata(
                dt_col, tgt_col, id_col,
                static_feats, freq_val,
                fill_method_val, group_cols_val,
                use_holidays, metric_val,
                presets_val, models_val, mean_only_val
            )
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "–û–±—É—á–µ–Ω–∏–µ, –ü—Ä–æ–≥–Ω–æ–∑ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"
            if st.session_state.get("train_predict_save_checkbox"):
                logging.info("'–û–±—É—á–µ–Ω–∏–µ, –ü—Ä–æ–≥–Ω–æ–∑ –∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ' –≤–∫–ª—é—á–µ–Ω–æ.")
                predict_success = run_prediction()
                if predict_success:
                    logging.info("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                    st.info("–û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Ç–µ–ø–µ—Ä—å —Ñ–æ—Ä–º–∏—Ä—É–µ–º Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                    df_train = st.session_state.get("df")
                    lb = st.session_state.get("leaderboard")
                    preds = st.session_state.get("predictions")
                    stt_train = st.session_state.get("static_df_train")
                    ensemble_info_df = st.session_state.get("weighted_ensemble_info")
                    
                    has_data_to_save = any([
                        df_train is not None,
                        lb is not None,
                        preds is not None,
                        (stt_train is not None and not stt_train.empty),
                        (ensemble_info_df is not None)
                    ])
                    if has_data_to_save:
                        excel_buffer = generate_excel_buffer(preds, lb, stt_train, ensemble_info_df)
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å Excel (–∞–≤—Ç–æ)",
                            data=excel_buffer.getvalue(),
                            file_name="results.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                        st.success("–§–∞–π–ª Excel –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!")
                    else:
                        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è/–ø—Ä–æ–≥–Ω–æ–∑–∞).")
                else:
                    logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏.")
    
    # ------------- –ü—Ä–æ–≥–Ω–æ–∑ -------------
    if st.session_state.get("predict_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑' –Ω–∞–∂–∞—Ç–∞.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º run_prediction:
        if "graphs_data" in st.session_state:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º
            del st.session_state["graphs_data"]
        
        result = run_prediction()
        if result:
            logging.info("–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        else:
            logging.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏.")
    
    # ------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV -------------
    if st.session_state.get("save_csv_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV' –Ω–∞–∂–∞—Ç–∞.")
        preds = st.session_state.get("predictions")
        if preds is None:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (predictions –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç).")
        else:
            csv_data = preds.reset_index().to_csv(index=False, encoding="utf-8")
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                data=csv_data,
                file_name="results.csv",
                mime="text/csv"
            )
            logging.info("–§–∞–π–ª CSV —Å –ø—Ä–µ–¥–∏–∫—Ç–æ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.")
    
    # ------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel -------------
    if st.session_state.get("save_excel_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Excel' –Ω–∞–∂–∞—Ç–∞.")
        preds = st.session_state.get("predictions")
        lb = st.session_state.get("leaderboard")
        stt_train = st.session_state.get("static_df_train")
        ensemble_info_df = st.session_state.get("weighted_ensemble_info")
        
        has_data_to_save = preds is not None
        if not has_data_to_save:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel.")
        else:
            excel_buffer = generate_excel_buffer(preds, lb, stt_train, ensemble_info_df)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                data=excel_buffer.getvalue(),
                file_name="results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
            logging.info("–§–∞–π–ª Excel –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é (—Ä—É—á–Ω–æ–π).")
    
    # ------------- –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -------------
    if st.session_state.get("show_logs_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏' –Ω–∞–∂–∞—Ç–∞.")
        logs_text = read_logs()
        st.subheader("–õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        st.text_area("logs", logs_text, height=300)
    
    if st.session_state.get("download_logs_btn"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏' –Ω–∞–∂–∞—Ç–∞.")
        logs_text = read_logs()
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –ª–æ–≥-—Ñ–∞–π–ª",
            data=logs_text,
            file_name="app.log",
            mime="text/plain",
        )
    
    # ------------- –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –ª–æ–≥–æ–≤ (–∞—Ä—Ö–∏–≤) -------------
    if st.session_state.get("download_model_and_logs"):
        logging.info("–ö–Ω–æ–ø–∫–∞ '–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ (–º–æ–¥–µ–ª–∏ + –ª–æ–≥–∏)' –Ω–∞–∂–∞—Ç–∞.")
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "w") as zf:
            model_dir = "AutogluonModels"
            if os.path.exists(model_dir):
                for root, dirs, files in os.walk(model_dir):
                    for file in files:
                        full_path = os.path.join(root, file)
                        rel_path = os.path.relpath(full_path, start=model_dir)
                        zf.write(full_path, arcname=os.path.join("AutogluonModels", rel_path))
            if os.path.exists(LOG_FILE):
                zf.write(LOG_FILE, arcname="logs/app.log")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∞—Ä—Ö–∏–≤ (–º–æ–¥–µ–ª–∏ + –ª–æ–≥–∏)",
            data=zip_buffer.getvalue(),
            file_name="model_and_logs.zip",
            mime="application/zip"
        )

if __name__ == "__main__":
    main()

